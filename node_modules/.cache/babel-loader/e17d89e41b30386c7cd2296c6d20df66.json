{"ast":null,"code":"import _objectSpread from \"/home/dagaubs/Cours/TPs/GLITAA/GLITAA_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_MUSICSTYLES_BEGIN, FETCH_MUSICSTYLES_SUCCESS, FETCH_MUSICSTYLES_FAILURE } from \"../actions/MusicStyleActions\";\nvar initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\nexport default function musicStyleReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_MUSICSTYLES_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case FETCH_MUSICSTYLES_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        items: action.payload.events\n      });\n\n    case FETCH_MUSICSTYLES_FAILURE:\n      // The request failed, but it did stop, so set loading to \"false\".\n      // Save the error, and we can display it somewhere\n      // Since it failed, we don't have items to display anymore, so set it empty.\n      // This is up to you and your app though: maybe you want to keep the items\n      // around! Do whatever seems right.\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        items: []\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/dagaubs/Cours/TPs/GLITAA/GLITAA_front/src/reducers/MusicStylesReducer.js"],"names":["FETCH_MUSICSTYLES_BEGIN","FETCH_MUSICSTYLES_SUCCESS","FETCH_MUSICSTYLES_FAILURE","initialState","items","loading","error","musicStyleReducer","state","action","type","payload","events"],"mappings":";AAAA,SACIA,uBADJ,EAEIC,yBAFJ,EAGIC,yBAHJ,QAIS,8BAJT;AAME,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,SAASC,iBAAT,GAGb;AAAA,MAFAC,KAEA,uEAFQL,YAER;AAAA,MADAM,MACA;;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,uBAAL;AACE;AACA;AACA,+BACKQ,KADL;AAEEH,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAMF,SAAKL,yBAAL;AACE;AACA;AACA,+BACKO,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGED,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeC;AAHxB;;AAMF,SAAKV,yBAAL;AACE;AACA;AACA;AACA;AACA;AACA,+BACKM,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL,KAHxB;AAIEF,QAAAA,KAAK,EAAE;AAJT;;AAOF;AACE;AACA,aAAOI,KAAP;AAlCJ;AAoCD","sourcesContent":["import {\n    FETCH_MUSICSTYLES_BEGIN,\n    FETCH_MUSICSTYLES_SUCCESS,\n    FETCH_MUSICSTYLES_FAILURE\n  } from \"../actions/MusicStyleActions\";\n  \n  const initialState = {\n    items: [],\n    loading: false,\n    error: null\n  };\n  \n  export default function musicStyleReducer(\n    state = initialState,\n    action\n  ) {\n    switch (action.type) {\n      case FETCH_MUSICSTYLES_BEGIN:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return {\n          ...state,\n          loading: true,\n          error: null\n        };\n  \n      case FETCH_MUSICSTYLES_SUCCESS:\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        return {\n          ...state,\n          loading: false,\n          items: action.payload.events\n        };\n  \n      case FETCH_MUSICSTYLES_FAILURE:\n        // The request failed, but it did stop, so set loading to \"false\".\n        // Save the error, and we can display it somewhere\n        // Since it failed, we don't have items to display anymore, so set it empty.\n        // This is up to you and your app though: maybe you want to keep the items\n        // around! Do whatever seems right.\n        return {\n          ...state,\n          loading: false,\n          error: action.payload.error,\n          items: []\n        };\n  \n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}