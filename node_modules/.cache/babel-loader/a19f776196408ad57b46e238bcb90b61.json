{"ast":null,"code":"var content = '/login/';\n\nfunction loginUser(username, password) {\n  console.log(\"let's login user\");\n  return fetch('/api/login/', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  }).then(handleErrors).then(function (res) {\n    return res.json();\n  });\n}\n\nexport function login(username, password) {\n  return function (dispatch) {\n    dispatch(loginBegin());\n    return loginUser(username, password).then(function (json) {\n      console.log(\"success!\", json);\n      dispatch(loginSuccess(json));\n      return json;\n    }).catch(function (error) {\n      return dispatch(loginFailure(error));\n    });\n  };\n} // Handle HTTP errors since fetch won't.\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nexport var LOGIN_BEGIN = \"LOGIN_BEGIN\";\nexport var LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport var LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport var loginBegin = function loginBegin() {\n  return {\n    type: LOGIN_BEGIN\n  };\n};\nexport var loginSuccess = function loginSuccess(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: \"succes\"\n  };\n};\nexport var loginFailure = function loginFailure(error) {\n  return {\n    type: LOGIN_FAILURE,\n    payload: {\n      error: error\n    }\n  };\n};","map":{"version":3,"sources":["/home/dagaubs/Cours/TPs/GLITAA/GLITAA_front/src/actions/LoginActions.js"],"names":["content","loginUser","username","password","console","log","fetch","method","headers","body","JSON","stringify","then","handleErrors","res","json","login","dispatch","loginBegin","loginSuccess","catch","error","loginFailure","response","ok","Error","statusText","LOGIN_BEGIN","LOGIN_SUCCESS","LOGIN_FAILURE","type","user","payload"],"mappings":"AAAA,IAAIA,OAAO,GAAG,SAAd;;AACA,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,QAA7B,EAAuC;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,SAAOC,KAAK,CAAC,aAAD,EAAgB;AACxBC,IAAAA,MAAM,EAAE,MADgB;AAExBC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAFe;AAMxBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBT,MAAAA,QAAQ,EAAEA,QADO;AAEjBC,MAAAA,QAAQ,EAAEA;AAFO,KAAf;AANkB,GAAhB,CAAL,CAWJS,IAXI,CAWCC,YAXD,EAYJD,IAZI,CAYC,UAAAE,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAZJ,CAAP;AAaD;;AAGH,OAAO,SAASC,KAAT,CAAed,QAAf,EAAyBC,QAAzB,EAAmC;AACtC,SAAO,UAAAc,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAACC,UAAU,EAAX,CAAR;AACA,WAAOjB,SAAS,CAACC,QAAD,EAAWC,QAAX,CAAT,CACJS,IADI,CACC,UAAAG,IAAI,EAAI;AACZX,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBU,IAAvB;AACAE,MAAAA,QAAQ,CAACE,YAAY,CAACJ,IAAD,CAAb,CAAR;AACA,aAAOA,IAAP;AACD,KALI,EAMJK,KANI,CAME,UAAAC,KAAK;AAAA,aACVJ,QAAQ,CAACK,YAAY,CAACD,KAAD,CAAb,CADE;AAAA,KANP,CAAP;AASD,GAXD;AAYD,C,CAED;;AACA,SAASR,YAAT,CAAsBU,QAAtB,EAAgC;AAC9B,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,UAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACD;;AACD,SAAOH,QAAP;AACD;;AAED,OAAO,IAAMI,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,IAAMX,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAO;AAC/BY,IAAAA,IAAI,EAAEH;AADyB,GAAP;AAAA,CAAnB;AAIP,OAAO,IAAMR,YAAY,GAAG,SAAfA,YAAe,CAAAY,IAAI;AAAA,SAAK;AACnCD,IAAAA,IAAI,EAAEF,aAD6B;AAEnCI,IAAAA,OAAO,EAAE;AAF0B,GAAL;AAAA,CAAzB;AAKP,OAAO,IAAMV,YAAY,GAAG,SAAfA,YAAe,CAAAD,KAAK;AAAA,SAAK;AACpCS,IAAAA,IAAI,EAAED,aAD8B;AAEpCG,IAAAA,OAAO,EAAE;AAAEX,MAAAA,KAAK,EAALA;AAAF;AAF2B,GAAL;AAAA,CAA1B","sourcesContent":["var content = '/login/'\nfunction loginUser(username, password) {\n    console.log(\"let's login user\");\n    return fetch('/api/login/', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            username: username,\n            password: password\n        })\n    })\n      .then(handleErrors)\n      .then(res => res.json());\n  }\n  \n\nexport function login(username, password) {\n    return dispatch => {\n      dispatch(loginBegin());\n      return loginUser(username, password)\n        .then(json => {\n          console.log(\"success!\",json);\n          dispatch(loginSuccess(json));\n          return json;\n        })\n        .catch(error =>\n          dispatch(loginFailure(error))\n        );\n    };\n  }\n  \n  // Handle HTTP errors since fetch won't.\n  function handleErrors(response) {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n    return response;\n  }\n  \n  export const LOGIN_BEGIN = \"LOGIN_BEGIN\";\n  export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\n  export const LOGIN_FAILURE = \"LOGIN_FAILURE\";\n  \n  export const loginBegin = () => ({\n    type: LOGIN_BEGIN\n  });\n  \n  export const loginSuccess = user => ({\n    type: LOGIN_SUCCESS,\n    payload: \"succes\"\n  });\n  \n  export const loginFailure = error => ({\n    type: LOGIN_FAILURE,\n    payload: { error }\n  });"]},"metadata":{},"sourceType":"module"}