{"ast":null,"code":"import { url } from '../index.js';\n/*import Header from 'headers';\n\nvar myHearder = new Header({\n  \"Content-Type\": \"text/plain\",\n  \"Content-Length\": content.length.toString(),\n  \"X-Custom-Header\": \"ProcessThisImmediately\",\n});\n*/\n\nvar content = '/events/';\n\nfunction getEvents() {\n  console.log(\"let's fetch events\"); //return fetch(url+\"/events/\", {method: 'text/plain', mode: 'cors'})\n\n  return fetch('http://localhost:8080/api/events/').then(handleErrors).then(function (res) {\n    return res.json();\n  });\n}\n\nexport function fetchEvents() {\n  return function (dispatch) {\n    dispatch(fetchEventsBegin());\n    return getEvents().then(function (json) {\n      dispatch(fetchEventsSuccess(json.Events));\n      return json.Events;\n    }).catch(function (error) {\n      return dispatch(fetchEventsFailure(error));\n    });\n  };\n} // Handle HTTP errors since fetch won't.\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nexport var FETCH_EVENTS_BEGIN = \"FETCH_EVENTS_BEGIN\";\nexport var FETCH_EVENTS_SUCCESS = \"FETCH_EVENTS_SUCCESS\";\nexport var FETCH_EVENTS_FAILURE = \"FETCH_EVENTS_FAILURE\";\nexport var fetchEventsBegin = function fetchEventsBegin() {\n  return {\n    type: FETCH_EVENTS_BEGIN\n  };\n};\nexport var fetchEventsSuccess = function fetchEventsSuccess(Events) {\n  return {\n    type: FETCH_EVENTS_SUCCESS,\n    payload: {\n      Events: Events\n    }\n  };\n};\nexport var fetchEventsFailure = function fetchEventsFailure(error) {\n  return {\n    type: FETCH_EVENTS_FAILURE,\n    payload: {\n      error: error\n    }\n  };\n};","map":{"version":3,"sources":["/home/dagaubs/Cours/TPs/GLITAA/GLITAA_front/src/actions/EventActions.js"],"names":["url","content","getEvents","console","log","fetch","then","handleErrors","res","json","fetchEvents","dispatch","fetchEventsBegin","fetchEventsSuccess","Events","catch","error","fetchEventsFailure","response","ok","Error","statusText","FETCH_EVENTS_BEGIN","FETCH_EVENTS_SUCCESS","FETCH_EVENTS_FAILURE","type","payload"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA;;;;;;;;;AASA,IAAIC,OAAO,GAAG,UAAd;;AACA,SAASC,SAAT,GAAqB;AACjBC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EADiB,CAEjB;;AACA,SAAOC,KAAK,CAAC,mCAAD,CAAL,CACJC,IADI,CACCC,YADD,EAEJD,IAFI,CAEC,UAAAE,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAFJ,CAAP;AAGD;;AAGH,OAAO,SAASC,WAAT,GAAuB;AAC1B,SAAO,UAAAC,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAACC,gBAAgB,EAAjB,CAAR;AACA,WAAOV,SAAS,GACbI,IADI,CACC,UAAAG,IAAI,EAAI;AACZE,MAAAA,QAAQ,CAACE,kBAAkB,CAACJ,IAAI,CAACK,MAAN,CAAnB,CAAR;AACA,aAAOL,IAAI,CAACK,MAAZ;AACD,KAJI,EAKJC,KALI,CAKE,UAAAC,KAAK;AAAA,aACVL,QAAQ,CAACM,kBAAkB,CAACD,KAAD,CAAnB,CADE;AAAA,KALP,CAAP;AAQD,GAVD;AAWD,C,CAED;;AACA,SAAST,YAAT,CAAsBW,QAAtB,EAAgC;AAC9B,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,UAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACD;;AACD,SAAOH,QAAP;AACD;;AAED,OAAO,IAAMI,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AAEP,OAAO,IAAMZ,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAO;AACrCa,IAAAA,IAAI,EAAEH;AAD+B,GAAP;AAAA,CAAzB;AAIP,OAAO,IAAMT,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,MAAM;AAAA,SAAK;AAC3CW,IAAAA,IAAI,EAAEF,oBADqC;AAE3CG,IAAAA,OAAO,EAAE;AAAEZ,MAAAA,MAAM,EAANA;AAAF;AAFkC,GAAL;AAAA,CAAjC;AAKP,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAD,KAAK;AAAA,SAAK;AAC1CS,IAAAA,IAAI,EAAED,oBADoC;AAE1CE,IAAAA,OAAO,EAAE;AAAEV,MAAAA,KAAK,EAALA;AAAF;AAFiC,GAAL;AAAA,CAAhC","sourcesContent":["import { url } from '../index.js';\n/*import Header from 'headers';\n\nvar myHearder = new Header({\n  \"Content-Type\": \"text/plain\",\n  \"Content-Length\": content.length.toString(),\n  \"X-Custom-Header\": \"ProcessThisImmediately\",\n});\n*/\n\nvar content = '/events/'\nfunction getEvents() {\n    console.log(\"let's fetch events\");\n    //return fetch(url+\"/events/\", {method: 'text/plain', mode: 'cors'})\n    return fetch('http://localhost:8080/api/events/')\n      .then(handleErrors)\n      .then(res => res.json());\n  }\n  \n\nexport function fetchEvents() {\n    return dispatch => {\n      dispatch(fetchEventsBegin());\n      return getEvents()\n        .then(json => {\n          dispatch(fetchEventsSuccess(json.Events));\n          return json.Events;\n        })\n        .catch(error =>\n          dispatch(fetchEventsFailure(error))\n        );\n    };\n  }\n  \n  // Handle HTTP errors since fetch won't.\n  function handleErrors(response) {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n    return response;\n  }\n  \n  export const FETCH_EVENTS_BEGIN = \"FETCH_EVENTS_BEGIN\";\n  export const FETCH_EVENTS_SUCCESS = \"FETCH_EVENTS_SUCCESS\";\n  export const FETCH_EVENTS_FAILURE = \"FETCH_EVENTS_FAILURE\";\n  \n  export const fetchEventsBegin = () => ({\n    type: FETCH_EVENTS_BEGIN\n  });\n  \n  export const fetchEventsSuccess = Events => ({\n    type: FETCH_EVENTS_SUCCESS,\n    payload: { Events }\n  });\n  \n  export const fetchEventsFailure = error => ({\n    type: FETCH_EVENTS_FAILURE,\n    payload: { error }\n  });"]},"metadata":{},"sourceType":"module"}