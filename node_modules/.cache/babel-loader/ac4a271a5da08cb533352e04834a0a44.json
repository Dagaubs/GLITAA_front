{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger'; // This will log into our console information about redux actions & store\n\nimport thunk from 'redux-thunk'; // This middleware allows us to use Promises in our actions (async in action)\n\nimport { sessionService } from 'redux-react-session';\nimport rootReducer from './reducers/rootReducer'; // We will implement this later on, create a file exporting and empty object for now\n\nvar middlewares = applyMiddleware(thunk, createLogger());\nvar initialState = {\n  //transactions:[{buyer: 'Charles', purchase:'Beer', amount:\"15\"}, {buyer: 'JB', purchase:'Birthday Cake', amount:\"100\"}, {buyer: 'Damien', purchase:'Game Boy', amount:\"40\"}, {buyer: 'Mathieu', purchase:'Seed', amount:\"40\"}],\n  //users : [{name:\"Charles\"}, {name:\"JB\"}, {name:\"Damien\"},{name:\"Mathieu\"},{name:\"Jeremy\"}, {name:\"Quentin\"}],\n  //selectUser: 'null'\n  filter: {\n    belonging: \"All\",\n    date: \"from today\",\n    search_name: '',\n    location: \"All\"\n  }\n};\n\nvar validateSession = function validateSession(session) {\n  // check if your session is still valid with a server check, through axios for instance\n  //return api.invokeRemoteSessionValidationThroughAxios(session).then(response => response.isSessionValid);\n  return true;\n}; //export const options = { refreshOnCheckAuth: true, redirectPath: '/home', driver: 'COOKIES', validateSession };\n\n\nexport default function configureStore()\n/*options,/* preloadedState = initialState*/\n{\n  // preloadedState is useful for SSR, which we don't use\n  var store = createStore(rootReducer, middlewares);\n  /*sessionService.initSessionService(store, options)\n    .then(() => console.log('Redux React Session is ready and a session was refreshed from your storage'))\n    .catch(() => console.log('Redux React Session is ready and there is no session in your storage'));\n  */\n\n  return store;\n}","map":{"version":3,"sources":["/home/dagaubs/Cours/TPs/GLITAA/GLITAA_front/src/configureStore.js"],"names":["createStore","applyMiddleware","createLogger","thunk","sessionService","rootReducer","middlewares","initialState","filter","belonging","date","search_name","location","validateSession","session","configureStore","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,cAA7B,C,CAA4C;;AAC5C,OAAOC,KAAP,MAAkB,aAAlB,C,CAAgC;;AAChC,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,WAAP,MAAwB,wBAAxB,C,CAAiD;;AAEjD,IAAMC,WAAW,GAAGL,eAAe,CAACE,KAAD,EAAQD,YAAY,EAApB,CAAnC;AAEA,IAAMK,YAAY,GAAG;AACnB;AACA;AACA;AACAC,EAAAA,MAAM,EAAC;AAACC,IAAAA,SAAS,EAAC,KAAX;AAAkBC,IAAAA,IAAI,EAAC,YAAvB;AAAqCC,IAAAA,WAAW,EAAC,EAAjD;AAAqDC,IAAAA,QAAQ,EAAE;AAA/D;AAJY,CAArB;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAa;AACnC;AACA;AACA,SAAO,IAAP;AACD,CAJD,C,CAMA;;;AAGA,eAAe,SAASC,cAAT;AAAwB;AAA8C;AAAE;AACrF,MAAMC,KAAK,GAAGhB,WAAW,CAACK,WAAD,EAAcC,WAAd,CAAzB;AACA;;;;;AAIA,SAAOU,KAAP;AACD","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { createLogger } from 'redux-logger' // This will log into our console information about redux actions & store\nimport thunk from 'redux-thunk' // This middleware allows us to use Promises in our actions (async in action)\nimport { sessionService } from 'redux-react-session';\nimport rootReducer from './reducers/rootReducer' // We will implement this later on, create a file exporting and empty object for now\n\nconst middlewares = applyMiddleware(thunk, createLogger())\n\nconst initialState = {\n  //transactions:[{buyer: 'Charles', purchase:'Beer', amount:\"15\"}, {buyer: 'JB', purchase:'Birthday Cake', amount:\"100\"}, {buyer: 'Damien', purchase:'Game Boy', amount:\"40\"}, {buyer: 'Mathieu', purchase:'Seed', amount:\"40\"}],\n  //users : [{name:\"Charles\"}, {name:\"JB\"}, {name:\"Damien\"},{name:\"Mathieu\"},{name:\"Jeremy\"}, {name:\"Quentin\"}],\n  //selectUser: 'null'\n  filter:{belonging:\"All\", date:\"from today\", search_name:'', location: \"All\"},\n}\n\nconst validateSession = (session) => {\n  // check if your session is still valid with a server check, through axios for instance\n  //return api.invokeRemoteSessionValidationThroughAxios(session).then(response => response.isSessionValid);\n  return true;\n}\n\n//export const options = { refreshOnCheckAuth: true, redirectPath: '/home', driver: 'COOKIES', validateSession };\n \n\nexport default function configureStore(/*options,/* preloadedState = initialState*/) { // preloadedState is useful for SSR, which we don't use\n  const store = createStore(rootReducer, middlewares);\n  /*sessionService.initSessionService(store, options)\n    .then(() => console.log('Redux React Session is ready and a session was refreshed from your storage'))\n    .catch(() => console.log('Redux React Session is ready and there is no session in your storage'));\n  */\n  return store\n}"]},"metadata":{},"sourceType":"module"}