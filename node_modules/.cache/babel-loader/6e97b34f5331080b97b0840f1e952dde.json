{"ast":null,"code":"import _objectSpread from \"/home/dagaubs/Cours/TPs/GLITAA/GLITAA_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { LOGIN_BEGIN, LOGIN_SUCCESS, LOGIN_FAILURE } from \"../actions/LoginActions\";\nvar initialState = {\n  success: false,\n  loading: false,\n  error: null,\n  authenticated: false\n};\nexport default function loginReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOGIN_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        success: false,\n        loading: true,\n        error: null,\n        authenticated: false\n      });\n\n    case LOGIN_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return {\n        error: null,\n        loading: false,\n        success: true,\n        authenticated: true\n      };\n\n    case LOGIN_FAILURE:\n      // The request failed, but it did stop, so set loading to \"false\".\n      // Save the error, and we can display it somewhere\n      // Since it failed, we don't have items to display anymore, so set it empty.\n      // This is up to you and your app though: maybe you want to keep the items\n      // around! Do whatever seems right.\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        user: null,\n        authenticated: false,\n        success: false\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/dagaubs/Cours/TPs/GLITAA/GLITAA_front/src/reducers/LoginReducer.js"],"names":["LOGIN_BEGIN","LOGIN_SUCCESS","LOGIN_FAILURE","initialState","success","loading","error","authenticated","loginReducer","state","action","type","payload","user"],"mappings":";AAAA,SACIA,WADJ,EAEIC,aAFJ,EAGIC,aAHJ,QAIS,yBAJT;AAME,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE,IAHY;AAInBC,EAAAA,aAAa,EAAE;AAJI,CAArB;AAOA,eAAe,SAASC,YAAT,GAGb;AAAA,MAFAC,KAEA,uEAFQN,YAER;AAAA,MADAO,MACA;;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,WAAL;AACE;AACA;AACA,+BACKS,KADL;AAEEL,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,OAAO,EAAE,IAHX;AAIEC,QAAAA,KAAK,EAAE,IAJT;AAKEC,QAAAA,aAAa,EAAE;AALjB;;AAQF,SAAKN,aAAL;AACE;AACA;AACA,aAAO;AACLK,QAAAA,KAAK,EAAE,IADF;AAELD,QAAAA,OAAO,EAAE,KAFJ;AAGLD,QAAAA,OAAO,EAAE,IAHJ;AAILG,QAAAA,aAAa,EAAE;AAJV,OAAP;;AAOF,SAAKL,aAAL;AACE;AACA;AACA;AACA;AACA;AACA,+BACKO,KADL;AAEEJ,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAEI,MAAM,CAACE,OAAP,CAAeN,KAHxB;AAIEO,QAAAA,IAAI,EAAE,IAJR;AAKEN,QAAAA,aAAa,EAAE,KALjB;AAMEH,QAAAA,OAAO,EAAE;AANX;;AASF;AACE;AACA,aAAOK,KAAP;AAvCJ;AAyCD","sourcesContent":["import {\n    LOGIN_BEGIN,\n    LOGIN_SUCCESS,\n    LOGIN_FAILURE\n  } from \"../actions/LoginActions\";\n  \n  const initialState = {\n    success: false,\n    loading: false,\n    error: null,\n    authenticated: false\n  };\n  \n  export default function loginReducer(\n    state = initialState,\n    action\n  ) {\n    switch (action.type) {\n      case LOGIN_BEGIN:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return {\n          ...state,\n          success: false,\n          loading: true,\n          error: null,\n          authenticated: false\n        };\n  \n      case LOGIN_SUCCESS:\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        return {\n          error: null,\n          loading: false,\n          success: true,\n          authenticated: true\n        };\n  \n      case LOGIN_FAILURE:\n        // The request failed, but it did stop, so set loading to \"false\".\n        // Save the error, and we can display it somewhere\n        // Since it failed, we don't have items to display anymore, so set it empty.\n        // This is up to you and your app though: maybe you want to keep the items\n        // around! Do whatever seems right.\n        return {\n          ...state,\n          loading: false,\n          error: action.payload.error,\n          user: null,\n          authenticated: false,\n          success: false\n        };\n  \n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}