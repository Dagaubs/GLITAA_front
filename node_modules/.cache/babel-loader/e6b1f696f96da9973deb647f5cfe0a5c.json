{"ast":null,"code":"import _objectSpread from \"/home/dagaubs/Cours/TPs/GLITAA/GLITAA_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_EVENTS_BEGIN, FETCH_EVENTS_SUCCESS, FETCH_EVENTS_FAILURE } from \"../actions/EventActions\";\nvar initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\nexport default function eventReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_EVENTS_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case FETCH_EVENTS_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      console.log(\"rootReducer :\", action.payload);\n      return _objectSpread({}, state, {\n        loading: false,\n        items: action.payload.events\n      });\n\n    case FETCH_EVENTS_FAILURE:\n      // The request failed, but it did stop, so set loading to \"false\".\n      // Save the error, and we can display it somewhere\n      // Since it failed, we don't have items to display anymore, so set it empty.\n      // This is up to you and your app though: maybe you want to keep the items\n      // around! Do whatever seems right.\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        items: []\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/dagaubs/Cours/TPs/GLITAA/GLITAA_front/src/reducers/EventsReducer.js"],"names":["FETCH_EVENTS_BEGIN","FETCH_EVENTS_SUCCESS","FETCH_EVENTS_FAILURE","initialState","items","loading","error","eventReducer","state","action","type","console","log","payload","events"],"mappings":";AAAA,SACEA,kBADF,EAEEC,oBAFF,EAGEC,oBAHF,QAIO,yBAJP;AAMA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,SAASC,YAAT,GAGb;AAAA,MAFAC,KAEA,uEAFQL,YAER;AAAA,MADAM,MACA;;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,kBAAL;AACE;AACA;AACA,+BACKQ,KADL;AAEEH,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAMF,SAAKL,oBAAL;AACE;AACA;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,MAAM,CAACI,OAApC;AACA,+BACKL,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGED,QAAAA,KAAK,EAAEK,MAAM,CAACI,OAAP,CAAeC;AAHxB;;AAMF,SAAKZ,oBAAL;AACE;AACA;AACA;AACA;AACA;AACA,+BACKM,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAEG,MAAM,CAACI,OAAP,CAAeP,KAHxB;AAIEF,QAAAA,KAAK,EAAE;AAJT;;AAOF;AACE;AACA,aAAOI,KAAP;AAnCJ;AAqCD","sourcesContent":["import {\n  FETCH_EVENTS_BEGIN,\n  FETCH_EVENTS_SUCCESS,\n  FETCH_EVENTS_FAILURE\n} from \"../actions/EventActions\";\n\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\n\nexport default function eventReducer(\n  state = initialState,\n  action\n) {\n  switch (action.type) {\n    case FETCH_EVENTS_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n\n    case FETCH_EVENTS_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      console.log(\"rootReducer :\", action.payload);\n      return {\n        ...state,\n        loading: false,\n        items: action.payload.events\n      };\n\n    case FETCH_EVENTS_FAILURE:\n      // The request failed, but it did stop, so set loading to \"false\".\n      // Save the error, and we can display it somewhere\n      // Since it failed, we don't have items to display anymore, so set it empty.\n      // This is up to you and your app though: maybe you want to keep the items\n      // around! Do whatever seems right.\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n        items: []\n      };\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}